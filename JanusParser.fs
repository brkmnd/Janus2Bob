// Implementation file for parser generated by fsyacc
module JanusParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "JanusParser.yy"

open JanusAbSyn

(* parse-error function and global value to fetch error *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
    Some (fun (ctxt: FSharp.Text.Parsing.ParseErrorContext<_>) ->
        ErrorContextDescriptor <-
            match ctxt.CurrentToken with
            | None -> "at beginning of input\n"
            | Some token -> sprintf "at token %A\n" token
        )

(* AUX functions *)
let add2prcs prg prgs =
    match prgs with
    | Procs prcs -> Procs (prg :: prcs)
    | Error -> Error
let add2decs v decs =
    match decs with
    | Decs d -> Decs (v :: d)
    | _ -> decs
let defDataAtts = {size = -1}


# 33 "JanusParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SHOW of (int*int*int)
  | SIZE of (int*int*int)
  | EOI of (int*int*int)
  | EMPTY of (int*int*int)
  | TOP of (int*int*int)
  | CALL of (int*int*int)
  | UNCALL of (int*int*int)
  | LOCAL of (int*int*int)
  | DELOCAL of (int*int*int)
  | PUSH of (int*int*int)
  | POP of (int*int*int)
  | FROM of (int*int*int)
  | DO of (int*int*int)
  | LOOP of (int*int*int)
  | UNTIL of (int*int*int)
  | IF of (int*int*int)
  | THEN of (int*int*int)
  | ELSE of (int*int*int)
  | FI of (int*int*int)
  | MAIN of (int*int*int)
  | PROC of (int*int*int)
  | SKIP of (int*int*int)
  | NIL of (int*int*int)
  | INT of (int*int*int)
  | STACK of (int*int*int)
  | BIND_UP of (int*int*int)
  | BIND_PLUS of (int*int*int)
  | BIND_MINUS of (int*int*int)
  | IFF of (int*int*int)
  | PERC of (int*int*int)
  | DIV of (int*int*int)
  | AMP of (int*int*int)
  | AMPAMP of (int*int*int)
  | MID of (int*int*int)
  | MIDMID of (int*int*int)
  | PLUS of (int*int*int)
  | MINUS of (int*int*int)
  | TIMES of (int*int*int)
  | UP of (int*int*int)
  | EQ of (int*int*int)
  | NEQ of (int*int*int)
  | LT of (int*int*int)
  | GT of (int*int*int)
  | LEQ of (int*int*int)
  | GEQ of (int*int*int)
  | COMMA of (int*int*int)
  | LPAR of (int*int*int)
  | RPAR of (int*int*int)
  | LBRACKET of (int*int*int)
  | RBRACKET of (int*int*int)
  | VAL_INT of (string*(int*int*int))
  | VAL_ID of (string*(int*int*int))
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SHOW
    | TOKEN_SIZE
    | TOKEN_EOI
    | TOKEN_EMPTY
    | TOKEN_TOP
    | TOKEN_CALL
    | TOKEN_UNCALL
    | TOKEN_LOCAL
    | TOKEN_DELOCAL
    | TOKEN_PUSH
    | TOKEN_POP
    | TOKEN_FROM
    | TOKEN_DO
    | TOKEN_LOOP
    | TOKEN_UNTIL
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FI
    | TOKEN_MAIN
    | TOKEN_PROC
    | TOKEN_SKIP
    | TOKEN_NIL
    | TOKEN_INT
    | TOKEN_STACK
    | TOKEN_BIND_UP
    | TOKEN_BIND_PLUS
    | TOKEN_BIND_MINUS
    | TOKEN_IFF
    | TOKEN_PERC
    | TOKEN_DIV
    | TOKEN_AMP
    | TOKEN_AMPAMP
    | TOKEN_MID
    | TOKEN_MIDMID
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_UP
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_COMMA
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_VAL_INT
    | TOKEN_VAL_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart_entry
    | NONTERM_start_entry
    | NONTERM_prog
    | NONTERM_d
    | NONTERM_t
    | NONTERM_p_main
    | NONTERM_declare
    | NONTERM_p
    | NONTERM_p_args
    | NONTERM_s_comp
    | NONTERM_s
    | NONTERM_call_args
    | NONTERM_e
    | NONTERM_e_lit
    | NONTERM_e_p_buildin
    | NONTERM_c
    | NONTERM_bind_op
    | NONTERM_x
    | NONTERM_x_arg
    | NONTERM_q

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SHOW _ -> 0 
  | SIZE _ -> 1 
  | EOI _ -> 2 
  | EMPTY _ -> 3 
  | TOP _ -> 4 
  | CALL _ -> 5 
  | UNCALL _ -> 6 
  | LOCAL _ -> 7 
  | DELOCAL _ -> 8 
  | PUSH _ -> 9 
  | POP _ -> 10 
  | FROM _ -> 11 
  | DO _ -> 12 
  | LOOP _ -> 13 
  | UNTIL _ -> 14 
  | IF _ -> 15 
  | THEN _ -> 16 
  | ELSE _ -> 17 
  | FI _ -> 18 
  | MAIN _ -> 19 
  | PROC _ -> 20 
  | SKIP _ -> 21 
  | NIL _ -> 22 
  | INT _ -> 23 
  | STACK _ -> 24 
  | BIND_UP _ -> 25 
  | BIND_PLUS _ -> 26 
  | BIND_MINUS _ -> 27 
  | IFF _ -> 28 
  | PERC _ -> 29 
  | DIV _ -> 30 
  | AMP _ -> 31 
  | AMPAMP _ -> 32 
  | MID _ -> 33 
  | MIDMID _ -> 34 
  | PLUS _ -> 35 
  | MINUS _ -> 36 
  | TIMES _ -> 37 
  | UP _ -> 38 
  | EQ _ -> 39 
  | NEQ _ -> 40 
  | LT _ -> 41 
  | GT _ -> 42 
  | LEQ _ -> 43 
  | GEQ _ -> 44 
  | COMMA _ -> 45 
  | LPAR _ -> 46 
  | RPAR _ -> 47 
  | LBRACKET _ -> 48 
  | RBRACKET _ -> 49 
  | VAL_INT _ -> 50 
  | VAL_ID _ -> 51 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SHOW 
  | 1 -> TOKEN_SIZE 
  | 2 -> TOKEN_EOI 
  | 3 -> TOKEN_EMPTY 
  | 4 -> TOKEN_TOP 
  | 5 -> TOKEN_CALL 
  | 6 -> TOKEN_UNCALL 
  | 7 -> TOKEN_LOCAL 
  | 8 -> TOKEN_DELOCAL 
  | 9 -> TOKEN_PUSH 
  | 10 -> TOKEN_POP 
  | 11 -> TOKEN_FROM 
  | 12 -> TOKEN_DO 
  | 13 -> TOKEN_LOOP 
  | 14 -> TOKEN_UNTIL 
  | 15 -> TOKEN_IF 
  | 16 -> TOKEN_THEN 
  | 17 -> TOKEN_ELSE 
  | 18 -> TOKEN_FI 
  | 19 -> TOKEN_MAIN 
  | 20 -> TOKEN_PROC 
  | 21 -> TOKEN_SKIP 
  | 22 -> TOKEN_NIL 
  | 23 -> TOKEN_INT 
  | 24 -> TOKEN_STACK 
  | 25 -> TOKEN_BIND_UP 
  | 26 -> TOKEN_BIND_PLUS 
  | 27 -> TOKEN_BIND_MINUS 
  | 28 -> TOKEN_IFF 
  | 29 -> TOKEN_PERC 
  | 30 -> TOKEN_DIV 
  | 31 -> TOKEN_AMP 
  | 32 -> TOKEN_AMPAMP 
  | 33 -> TOKEN_MID 
  | 34 -> TOKEN_MIDMID 
  | 35 -> TOKEN_PLUS 
  | 36 -> TOKEN_MINUS 
  | 37 -> TOKEN_TIMES 
  | 38 -> TOKEN_UP 
  | 39 -> TOKEN_EQ 
  | 40 -> TOKEN_NEQ 
  | 41 -> TOKEN_LT 
  | 42 -> TOKEN_GT 
  | 43 -> TOKEN_LEQ 
  | 44 -> TOKEN_GEQ 
  | 45 -> TOKEN_COMMA 
  | 46 -> TOKEN_LPAR 
  | 47 -> TOKEN_RPAR 
  | 48 -> TOKEN_LBRACKET 
  | 49 -> TOKEN_RBRACKET 
  | 50 -> TOKEN_VAL_INT 
  | 51 -> TOKEN_VAL_ID 
  | 54 -> TOKEN_end_of_input
  | 52 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart_entry 
    | 1 -> NONTERM_start_entry 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_d 
    | 4 -> NONTERM_d 
    | 5 -> NONTERM_t 
    | 6 -> NONTERM_t 
    | 7 -> NONTERM_p_main 
    | 8 -> NONTERM_declare 
    | 9 -> NONTERM_declare 
    | 10 -> NONTERM_declare 
    | 11 -> NONTERM_p 
    | 12 -> NONTERM_p 
    | 13 -> NONTERM_p_args 
    | 14 -> NONTERM_p_args 
    | 15 -> NONTERM_s_comp 
    | 16 -> NONTERM_s_comp 
    | 17 -> NONTERM_s 
    | 18 -> NONTERM_s 
    | 19 -> NONTERM_s 
    | 20 -> NONTERM_s 
    | 21 -> NONTERM_s 
    | 22 -> NONTERM_s 
    | 23 -> NONTERM_s 
    | 24 -> NONTERM_s 
    | 25 -> NONTERM_s 
    | 26 -> NONTERM_s 
    | 27 -> NONTERM_s 
    | 28 -> NONTERM_s 
    | 29 -> NONTERM_call_args 
    | 30 -> NONTERM_call_args 
    | 31 -> NONTERM_e 
    | 32 -> NONTERM_e 
    | 33 -> NONTERM_e 
    | 34 -> NONTERM_e 
    | 35 -> NONTERM_e 
    | 36 -> NONTERM_e 
    | 37 -> NONTERM_e 
    | 38 -> NONTERM_e 
    | 39 -> NONTERM_e 
    | 40 -> NONTERM_e 
    | 41 -> NONTERM_e 
    | 42 -> NONTERM_e 
    | 43 -> NONTERM_e 
    | 44 -> NONTERM_e 
    | 45 -> NONTERM_e 
    | 46 -> NONTERM_e 
    | 47 -> NONTERM_e 
    | 48 -> NONTERM_e 
    | 49 -> NONTERM_e_lit 
    | 50 -> NONTERM_e_lit 
    | 51 -> NONTERM_e_lit 
    | 52 -> NONTERM_e_lit 
    | 53 -> NONTERM_e_lit 
    | 54 -> NONTERM_e_lit 
    | 55 -> NONTERM_e_p_buildin 
    | 56 -> NONTERM_e_p_buildin 
    | 57 -> NONTERM_e_p_buildin 
    | 58 -> NONTERM_c 
    | 59 -> NONTERM_bind_op 
    | 60 -> NONTERM_bind_op 
    | 61 -> NONTERM_bind_op 
    | 62 -> NONTERM_x 
    | 63 -> NONTERM_x_arg 
    | 64 -> NONTERM_x_arg 
    | 65 -> NONTERM_q 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 54 
let _fsyacc_tagOfErrorTerminal = 52

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SHOW _ -> "SHOW" 
  | SIZE _ -> "SIZE" 
  | EOI _ -> "EOI" 
  | EMPTY _ -> "EMPTY" 
  | TOP _ -> "TOP" 
  | CALL _ -> "CALL" 
  | UNCALL _ -> "UNCALL" 
  | LOCAL _ -> "LOCAL" 
  | DELOCAL _ -> "DELOCAL" 
  | PUSH _ -> "PUSH" 
  | POP _ -> "POP" 
  | FROM _ -> "FROM" 
  | DO _ -> "DO" 
  | LOOP _ -> "LOOP" 
  | UNTIL _ -> "UNTIL" 
  | IF _ -> "IF" 
  | THEN _ -> "THEN" 
  | ELSE _ -> "ELSE" 
  | FI _ -> "FI" 
  | MAIN _ -> "MAIN" 
  | PROC _ -> "PROC" 
  | SKIP _ -> "SKIP" 
  | NIL _ -> "NIL" 
  | INT _ -> "INT" 
  | STACK _ -> "STACK" 
  | BIND_UP _ -> "BIND_UP" 
  | BIND_PLUS _ -> "BIND_PLUS" 
  | BIND_MINUS _ -> "BIND_MINUS" 
  | IFF _ -> "IFF" 
  | PERC _ -> "PERC" 
  | DIV _ -> "DIV" 
  | AMP _ -> "AMP" 
  | AMPAMP _ -> "AMPAMP" 
  | MID _ -> "MID" 
  | MIDMID _ -> "MIDMID" 
  | PLUS _ -> "PLUS" 
  | MINUS _ -> "MINUS" 
  | TIMES _ -> "TIMES" 
  | UP _ -> "UP" 
  | EQ _ -> "EQ" 
  | NEQ _ -> "NEQ" 
  | LT _ -> "LT" 
  | GT _ -> "GT" 
  | LEQ _ -> "LEQ" 
  | GEQ _ -> "GEQ" 
  | COMMA _ -> "COMMA" 
  | LPAR _ -> "LPAR" 
  | RPAR _ -> "RPAR" 
  | LBRACKET _ -> "LBRACKET" 
  | RBRACKET _ -> "RBRACKET" 
  | VAL_INT _ -> "VAL_INT" 
  | VAL_ID _ -> "VAL_ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SHOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SIZE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EMPTY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CALL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNCALL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LOCAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DELOCAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PUSH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | POP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FROM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DO _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LOOP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNTIL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PROC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SKIP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NIL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIND_UP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIND_PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BIND_MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PERC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AMP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AMPAMP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MIDMID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL_ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 18us; 19us; 4us; 65535us; 26us; 31us; 33us; 31us; 63us; 64us; 69us; 70us; 1us; 65535us; 0us; 4us; 3us; 65535us; 15us; 16us; 19us; 20us; 22us; 23us; 2us; 65535us; 4us; 5us; 29us; 30us; 2us; 65535us; 26us; 27us; 33us; 34us; 8us; 65535us; 16us; 17us; 28us; 29us; 35us; 36us; 49us; 50us; 51us; 52us; 57us; 58us; 59us; 60us; 67us; 68us; 8us; 65535us; 16us; 35us; 28us; 35us; 35us; 35us; 49us; 35us; 51us; 35us; 57us; 35us; 59us; 35us; 67us; 35us; 3us; 65535us; 76us; 77us; 81us; 82us; 102us; 103us; 28us; 65535us; 38us; 39us; 40us; 41us; 43us; 44us; 47us; 48us; 53us; 54us; 55us; 56us; 61us; 62us; 66us; 67us; 72us; 73us; 105us; 106us; 125us; 107us; 126us; 108us; 127us; 109us; 128us; 110us; 129us; 111us; 130us; 112us; 131us; 113us; 132us; 114us; 133us; 115us; 134us; 116us; 135us; 117us; 136us; 118us; 137us; 119us; 138us; 120us; 139us; 121us; 140us; 122us; 141us; 123us; 145us; 124us; 28us; 65535us; 38us; 104us; 40us; 104us; 43us; 104us; 47us; 104us; 53us; 104us; 55us; 104us; 61us; 104us; 66us; 104us; 72us; 104us; 105us; 104us; 125us; 104us; 126us; 104us; 127us; 104us; 128us; 104us; 129us; 104us; 130us; 104us; 131us; 104us; 132us; 104us; 133us; 104us; 134us; 104us; 135us; 104us; 136us; 104us; 137us; 104us; 138us; 104us; 139us; 104us; 140us; 104us; 141us; 104us; 145us; 104us; 28us; 65535us; 38us; 147us; 40us; 147us; 43us; 147us; 47us; 147us; 53us; 147us; 55us; 147us; 61us; 147us; 66us; 147us; 72us; 147us; 105us; 147us; 125us; 147us; 126us; 147us; 127us; 147us; 128us; 147us; 129us; 147us; 130us; 147us; 131us; 147us; 132us; 147us; 133us; 147us; 134us; 147us; 135us; 147us; 136us; 147us; 137us; 147us; 138us; 147us; 139us; 147us; 140us; 147us; 141us; 147us; 145us; 147us; 29us; 65535us; 7us; 8us; 38us; 143us; 40us; 143us; 43us; 143us; 47us; 143us; 53us; 143us; 55us; 143us; 61us; 143us; 66us; 143us; 72us; 143us; 105us; 143us; 125us; 143us; 126us; 143us; 127us; 143us; 128us; 143us; 129us; 143us; 130us; 143us; 131us; 143us; 132us; 143us; 133us; 143us; 134us; 143us; 135us; 143us; 136us; 143us; 137us; 143us; 138us; 143us; 139us; 143us; 140us; 143us; 141us; 143us; 145us; 143us; 2us; 65535us; 37us; 38us; 42us; 43us; 52us; 65535us; 16us; 37us; 18us; 6us; 21us; 22us; 28us; 37us; 35us; 37us; 38us; 144us; 40us; 144us; 43us; 144us; 45us; 46us; 47us; 144us; 49us; 37us; 51us; 37us; 53us; 144us; 55us; 144us; 57us; 37us; 59us; 37us; 61us; 144us; 64us; 65us; 66us; 144us; 67us; 37us; 70us; 71us; 72us; 144us; 76us; 101us; 81us; 101us; 85us; 86us; 87us; 88us; 91us; 92us; 93us; 94us; 97us; 98us; 102us; 101us; 105us; 144us; 125us; 144us; 126us; 144us; 127us; 144us; 128us; 144us; 129us; 144us; 130us; 144us; 131us; 144us; 132us; 144us; 133us; 144us; 134us; 144us; 135us; 144us; 136us; 144us; 137us; 144us; 138us; 144us; 139us; 144us; 140us; 144us; 141us; 144us; 145us; 144us; 150us; 151us; 154us; 155us; 158us; 159us; 1us; 65535us; 31us; 32us; 3us; 65535us; 24us; 25us; 74us; 75us; 79us; 80us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 12us; 14us; 18us; 21us; 24us; 33us; 42us; 46us; 75us; 104us; 133us; 163us; 166us; 219us; 221us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 2us; 13us; 14us; 1us; 13us; 1us; 13us; 2us; 15us; 16us; 1us; 16us; 3us; 17us; 18us; 19us; 1us; 17us; 17us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 18us; 17us; 18us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 18us; 1us; 18us; 17us; 18us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 19us; 1us; 19us; 1us; 20us; 17us; 20us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 17us; 20us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 21us; 17us; 21us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 17us; 21us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 17us; 22us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 17us; 22us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 2us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 31us; 1us; 32us; 17us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 17us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 52us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 2us; 51us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 2us; 63us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 66us; 69us; 71us; 73us; 76us; 78us; 82us; 84us; 102us; 104us; 122us; 124us; 126us; 144us; 146us; 148us; 150us; 168us; 170us; 172us; 174us; 176us; 178us; 196us; 198us; 216us; 218us; 220us; 222us; 224us; 226us; 244us; 246us; 248us; 250us; 252us; 270us; 272us; 274us; 276us; 278us; 280us; 298us; 300us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; 348us; 350us; 352us; 355us; 357us; 359us; 361us; 363us; 381us; 399us; 417us; 435us; 453us; 471us; 489us; 507us; 525us; 543us; 561us; 579us; 597us; 615us; 633us; 651us; 669us; 687us; 705us; 707us; 709us; 711us; 713us; 715us; 717us; 719us; 721us; 723us; 725us; 727us; 729us; 731us; 733us; 735us; 737us; 739us; 741us; 743us; 746us; 748us; 750us; 752us; 754us; 756us; 758us; 760us; 762us; 764us; 766us; 768us; 770us; 772us; 774us; 776us; 778us; 780us; 782us; 784us; 786us; 788us; 791us; 793us; 795us; |]
let _fsyacc_action_rows = 170
let _fsyacc_actionTableElements = [|1us; 32768us; 20us; 12us; 0us; 49152us; 1us; 32768us; 2us; 3us; 0us; 16385us; 1us; 16395us; 20us; 24us; 0us; 16386us; 1us; 16387us; 48us; 7us; 1us; 32768us; 50us; 161us; 1us; 32768us; 49us; 9us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 32768us; 19us; 13us; 1us; 32768us; 46us; 14us; 1us; 32768us; 47us; 15us; 2us; 16392us; 23us; 18us; 24us; 21us; 10us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 0us; 16391us; 1us; 32768us; 51us; 165us; 2us; 16392us; 23us; 18us; 24us; 21us; 0us; 16393us; 1us; 32768us; 51us; 165us; 2us; 16392us; 23us; 18us; 24us; 21us; 0us; 16394us; 1us; 32768us; 51us; 169us; 1us; 32768us; 46us; 26us; 2us; 32768us; 23us; 10us; 24us; 11us; 1us; 32768us; 47us; 28us; 10us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 1us; 16395us; 20us; 24us; 0us; 16396us; 1us; 32768us; 51us; 166us; 1us; 16398us; 45us; 33us; 2us; 32768us; 23us; 10us; 24us; 11us; 0us; 16397us; 10us; 16399us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 0us; 16400us; 5us; 32768us; 25us; 164us; 26us; 162us; 27us; 163us; 28us; 45us; 48us; 40us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 16us; 16401us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 17us; 32768us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 49us; 42us; 3us; 32768us; 25us; 164us; 26us; 162us; 27us; 163us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 16us; 16402us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 1us; 32768us; 51us; 165us; 0us; 16403us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 17us; 32768us; 16us; 49us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 10us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 1us; 32768us; 17us; 51us; 10us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 1us; 32768us; 18us; 53us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 16us; 16404us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 17us; 32768us; 12us; 57us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 10us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 1us; 32768us; 13us; 59us; 10us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 51us; 165us; 1us; 32768us; 14us; 61us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 16us; 16405us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 2us; 32768us; 23us; 10us; 24us; 11us; 1us; 32768us; 51us; 165us; 1us; 32768us; 39us; 66us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 26us; 32768us; 0us; 96us; 5us; 74us; 6us; 79us; 7us; 63us; 9us; 84us; 10us; 90us; 11us; 55us; 15us; 47us; 21us; 100us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 51us; 165us; 1us; 32768us; 8us; 69us; 2us; 32768us; 23us; 10us; 24us; 11us; 1us; 32768us; 51us; 165us; 1us; 32768us; 39us; 72us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 16us; 16406us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 1us; 32768us; 51us; 169us; 1us; 32768us; 46us; 76us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 78us; 0us; 16407us; 1us; 32768us; 51us; 169us; 1us; 32768us; 46us; 81us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 83us; 0us; 16408us; 1us; 32768us; 46us; 85us; 1us; 32768us; 51us; 165us; 1us; 32768us; 45us; 87us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 89us; 0us; 16409us; 1us; 32768us; 46us; 91us; 1us; 32768us; 51us; 165us; 1us; 32768us; 45us; 93us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 95us; 0us; 16410us; 1us; 32768us; 46us; 97us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 99us; 0us; 16411us; 0us; 16412us; 1us; 16414us; 45us; 102us; 1us; 32768us; 51us; 165us; 0us; 16413us; 0us; 16415us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 6us; 16416us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 37us; 128us; 38us; 127us; 6us; 16417us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 37us; 128us; 38us; 127us; 6us; 16418us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 37us; 128us; 38us; 127us; 2us; 16419us; 31us; 131us; 33us; 133us; 4us; 16420us; 29us; 130us; 31us; 131us; 33us; 133us; 38us; 127us; 4us; 16421us; 29us; 130us; 31us; 131us; 33us; 133us; 38us; 127us; 3us; 16422us; 31us; 131us; 33us; 133us; 38us; 127us; 0us; 16423us; 14us; 16424us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 1us; 16425us; 31us; 131us; 14us; 16426us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 8us; 16427us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 8us; 16428us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 13us; 16429us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 8us; 16430us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 8us; 16431us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 8us; 16432us; 29us; 130us; 30us; 129us; 31us; 131us; 33us; 133us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 17us; 32768us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 47us; 142us; 17us; 32768us; 29us; 130us; 30us; 129us; 31us; 131us; 32us; 132us; 33us; 133us; 34us; 134us; 35us; 125us; 36us; 126us; 37us; 128us; 38us; 127us; 39us; 137us; 40us; 138us; 41us; 135us; 42us; 136us; 43us; 139us; 44us; 140us; 49us; 146us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 0us; 16433us; 0us; 16434us; 1us; 16435us; 48us; 145us; 8us; 32768us; 1us; 149us; 3us; 153us; 4us; 157us; 22us; 148us; 36us; 105us; 46us; 141us; 50us; 161us; 51us; 165us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 1us; 32768us; 46us; 150us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 152us; 0us; 16439us; 1us; 32768us; 46us; 154us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 156us; 0us; 16440us; 1us; 32768us; 46us; 158us; 1us; 32768us; 51us; 165us; 1us; 32768us; 47us; 160us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 1us; 16447us; 48us; 167us; 1us; 32768us; 49us; 168us; 0us; 16448us; 0us; 16449us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 11us; 13us; 15us; 16us; 17us; 18us; 20us; 22us; 24us; 27us; 38us; 39us; 41us; 44us; 45us; 47us; 50us; 51us; 53us; 55us; 58us; 60us; 71us; 73us; 74us; 76us; 78us; 81us; 82us; 93us; 94us; 100us; 109us; 126us; 135us; 153us; 157us; 166us; 183us; 185us; 186us; 195us; 213us; 224us; 226us; 237us; 239us; 248us; 265us; 274us; 292us; 303us; 305us; 316us; 318us; 327us; 344us; 347us; 349us; 351us; 360us; 387us; 389us; 392us; 394us; 396us; 405us; 422us; 424us; 426us; 428us; 430us; 431us; 433us; 435us; 437us; 439us; 440us; 442us; 444us; 446us; 448us; 450us; 451us; 453us; 455us; 457us; 459us; 461us; 462us; 464us; 466us; 468us; 469us; 470us; 472us; 474us; 475us; 476us; 485us; 492us; 499us; 506us; 509us; 514us; 519us; 523us; 524us; 539us; 541us; 556us; 565us; 574us; 588us; 597us; 606us; 615us; 633us; 651us; 660us; 669us; 678us; 687us; 696us; 705us; 714us; 723us; 732us; 741us; 750us; 759us; 768us; 777us; 786us; 795us; 804us; 805us; 806us; 808us; 817us; 818us; 819us; 820us; 822us; 824us; 826us; 827us; 829us; 831us; 833us; 834us; 836us; 838us; 840us; 841us; 842us; 843us; 844us; 845us; 846us; 848us; 850us; 851us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 4us; 1us; 1us; 6us; 0us; 3us; 3us; 0us; 7us; 4us; 2us; 1us; 2us; 3us; 6us; 3us; 8us; 8us; 11us; 5us; 5us; 6us; 6us; 4us; 1us; 3us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 4us; 1us; 1us; 4us; 4us; 4us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 16us; 16us; 16us; 17us; 18us; 18us; 19us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 65535us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 16411us; 16412us; 65535us; 65535us; 16413us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16433us; 16434us; 65535us; 65535us; 16436us; 16437us; 16438us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 65535us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 65535us; 65535us; 16448us; 16449us; |]
let _fsyacc_reductions ()  =    [| 
# 478 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Prg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart_entry));
# 487 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "JanusParser.yy"
                                      _1 
                   )
# 75 "JanusParser.yy"
                 : Prg));
# 499 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'p_main)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'p)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "JanusParser.yy"
                                      add2prcs _1 _2 
                   )
# 78 "JanusParser.yy"
                 : 'prog));
# 511 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "JanusParser.yy"
                                                   _1 defDataAtts 
                   )
# 81 "JanusParser.yy"
                 : 'd));
# 522 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'c)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "JanusParser.yy"
                                                   fun t -> _1 {size = (int _3)} (Array t) 
                   )
# 82 "JanusParser.yy"
                 : 'd));
# 536 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "JanusParser.yy"
                                       Int 
                   )
# 85 "JanusParser.yy"
                 : 't));
# 547 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "JanusParser.yy"
                                       Stack 
                   )
# 86 "JanusParser.yy"
                 : 't));
# 558 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'declare)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "JanusParser.yy"
                                                                Proc ("main",[],_5::_6) 
                   )
# 89 "JanusParser.yy"
                 : 'p_main));
# 574 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "JanusParser.yy"
                                               Decs [] 
                   )
# 92 "JanusParser.yy"
                 : 'declare));
# 584 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'd)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'declare)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "JanusParser.yy"
                                               add2decs (_2 Int) _3 
                   )
# 93 "JanusParser.yy"
                 : 'declare));
# 597 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'declare)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "JanusParser.yy"
                                               Decs [] 
                   )
# 94 "JanusParser.yy"
                 : 'declare));
# 610 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "JanusParser.yy"
                                                           Procs [] 
                   )
# 97 "JanusParser.yy"
                 : 'p));
# 620 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'q)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'p_args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'p)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "JanusParser.yy"
                                                                add2prcs (Proc(_2,_4,_6)) _7 
                   )
# 98 "JanusParser.yy"
                 : 'p));
# 637 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 't)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'x_arg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'p_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "JanusParser.yy"
                                                   (_2 _1)::_4 
                   )
# 101 "JanusParser.yy"
                 : 'p_args));
# 651 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 't)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'x_arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "JanusParser.yy"
                                                   [_2 _1] 
                   )
# 102 "JanusParser.yy"
                 : 'p_args));
# 663 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 's)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "JanusParser.yy"
                                                   _1 
                   )
# 105 "JanusParser.yy"
                 : 's_comp));
# 674 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 's)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "JanusParser.yy"
                                                   _1 @ _2 
                   )
# 106 "JanusParser.yy"
                 : 's_comp));
# 686 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "JanusParser.yy"
                                                                [BindOp (fst _2,_1 defDataAtts Var,_3,snd _2)] 
                   )
# 108 "JanusParser.yy"
                 : 's));
# 699 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_op)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "JanusParser.yy"
                                                               
                             [BindOp (fst _5,Index (_1 defDataAtts (Array Var),_3,_2),_6,snd _5)]
                             
                   )
# 109 "JanusParser.yy"
                 : 's));
# 717 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "JanusParser.yy"
                                                                  
                             [BindOp ("switch",_1 defDataAtts Var,Literal (_3 defDataAtts Var),_2)]
                             
                   )
# 112 "JanusParser.yy"
                 : 's));
# 732 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "JanusParser.yy"
                                                                [If (_2,_4,_6,_8,(_1,_7))] 
                   )
# 115 "JanusParser.yy"
                 : 's));
# 750 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "JanusParser.yy"
                                                                             [From (_2,_4,_6,_8,(_1,_7))] 
                   )
# 116 "JanusParser.yy"
                 : 's));
# 768 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 't)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 's_comp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 't)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "JanusParser.yy"
                                                                       
                             [Local (_3 defDataAtts _2,_5,_6,_9 defDataAtts _8,_11,(_1,_10))]
                             
                   )
# 117 "JanusParser.yy"
                 : 's));
# 791 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'q)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "JanusParser.yy"
                                                                   [Call (_2,_4,_1)] 
                   )
# 120 "JanusParser.yy"
                 : 's));
# 806 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'q)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "JanusParser.yy"
                                                                   [Uncall (_2,_4,_1)] 
                   )
# 121 "JanusParser.yy"
                 : 's));
# 821 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "JanusParser.yy"
                                                                   [] 
                   )
# 122 "JanusParser.yy"
                 : 's));
# 837 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "JanusParser.yy"
                                                                   [] 
                   )
# 123 "JanusParser.yy"
                 : 's));
# 853 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "JanusParser.yy"
                                                                   [CallExt ("show",[_3 defDataAtts Var],_1)] 
                   )
# 124 "JanusParser.yy"
                 : 's));
# 867 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "JanusParser.yy"
                                                                   [Skip] 
                   )
# 125 "JanusParser.yy"
                 : 's));
# 878 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "JanusParser.yy"
                                                   [_1 defDataAtts Var] @ _3 
                   )
# 128 "JanusParser.yy"
                 : 'call_args));
# 891 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "JanusParser.yy"
                                                   [_1 defDataAtts Var] 
                   )
# 129 "JanusParser.yy"
                 : 'call_args));
# 902 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e_lit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "JanusParser.yy"
                                                   _1 
                   )
# 132 "JanusParser.yy"
                 : 'e));
# 913 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "JanusParser.yy"
                                                   UnaOp ("minus",_2,_1) 
                   )
# 133 "JanusParser.yy"
                 : 'e));
# 925 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "JanusParser.yy"
                                                   BinOp ("plus",_1,_3,_2) 
                   )
# 134 "JanusParser.yy"
                 : 'e));
# 938 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "JanusParser.yy"
                                                   BinOp ("minus",_1,_3,_2) 
                   )
# 135 "JanusParser.yy"
                 : 'e));
# 951 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "JanusParser.yy"
                                                   BinOp ("up",_1,_3,_2) 
                   )
# 136 "JanusParser.yy"
                 : 'e));
# 964 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "JanusParser.yy"
                                                   BinOp ("times",_1,_3,_2) 
                   )
# 137 "JanusParser.yy"
                 : 'e));
# 977 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "JanusParser.yy"
                                                   BinOp ("div",_1,_3,_2) 
                   )
# 138 "JanusParser.yy"
                 : 'e));
# 990 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "JanusParser.yy"
                                                   BinOp ("perc",_1,_3,_2) 
                   )
# 139 "JanusParser.yy"
                 : 'e));
# 1003 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "JanusParser.yy"
                                                   BinOp ("amp",_1,_3,_2) 
                   )
# 140 "JanusParser.yy"
                 : 'e));
# 1016 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "JanusParser.yy"
                                                   BinOp ("ampamp",_1,_3,_2) 
                   )
# 141 "JanusParser.yy"
                 : 'e));
# 1029 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "JanusParser.yy"
                                                   BinOp ("mid",_1,_3,_2) 
                   )
# 142 "JanusParser.yy"
                 : 'e));
# 1042 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "JanusParser.yy"
                                                   BinOp ("midmid",_1,_3,_2) 
                   )
# 143 "JanusParser.yy"
                 : 'e));
# 1055 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "JanusParser.yy"
                                                   BinOp ("lt",_1,_3,_2) 
                   )
# 144 "JanusParser.yy"
                 : 'e));
# 1068 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "JanusParser.yy"
                                                   BinOp ("gt",_1,_3,_2) 
                   )
# 145 "JanusParser.yy"
                 : 'e));
# 1081 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "JanusParser.yy"
                                                   BinOp ("eq",_1,_3,_2) 
                   )
# 146 "JanusParser.yy"
                 : 'e));
# 1094 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "JanusParser.yy"
                                                   BinOp ("neq",_1,_3,_2) 
                   )
# 147 "JanusParser.yy"
                 : 'e));
# 1107 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "JanusParser.yy"
                                                   BinOp ("leq",_1,_3,_2) 
                   )
# 148 "JanusParser.yy"
                 : 'e));
# 1120 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "JanusParser.yy"
                                                   BinOp ("geq",_1,_3,_2) 
                   )
# 149 "JanusParser.yy"
                 : 'e));
# 1133 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "JanusParser.yy"
                                                   _2 
                   )
# 152 "JanusParser.yy"
                 : 'e_lit));
# 1146 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'c)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "JanusParser.yy"
                                                   Literal (Val _1) 
                   )
# 153 "JanusParser.yy"
                 : 'e_lit));
# 1157 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "JanusParser.yy"
                                                   Literal (_1 defDataAtts Var) 
                   )
# 154 "JanusParser.yy"
                 : 'e_lit));
# 1168 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'e)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "JanusParser.yy"
                                                   Literal (Index (_1 defDataAtts (Array Var),_3,_2)) 
                   )
# 155 "JanusParser.yy"
                 : 'e_lit));
# 1182 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'e_p_buildin)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "JanusParser.yy"
                                                   Literal _1 
                   )
# 156 "JanusParser.yy"
                 : 'e_lit));
# 1193 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "JanusParser.yy"
                                                   Literal Nil 
                   )
# 157 "JanusParser.yy"
                 : 'e_lit));
# 1204 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "JanusParser.yy"
                                                   CallBuildin ("size",[_3 defDataAtts Var],_1) 
                   )
# 159 "JanusParser.yy"
                 : 'e_p_buildin));
# 1218 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "JanusParser.yy"
                                                   Nil 
                   )
# 160 "JanusParser.yy"
                 : 'e_p_buildin));
# 1232 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'x)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "JanusParser.yy"
                                                   Nil 
                   )
# 161 "JanusParser.yy"
                 : 'e_p_buildin));
# 1246 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*(int*int*int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "JanusParser.yy"
                                                   fst _1 
                   )
# 163 "JanusParser.yy"
                 : 'c));
# 1257 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "JanusParser.yy"
                                           ("plus",_1) 
                   )
# 166 "JanusParser.yy"
                 : 'bind_op));
# 1268 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "JanusParser.yy"
                                           ("minus",_1) 
                   )
# 167 "JanusParser.yy"
                 : 'bind_op));
# 1279 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "JanusParser.yy"
                                           ("up",_1) 
                   )
# 168 "JanusParser.yy"
                 : 'bind_op));
# 1290 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*(int*int*int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "JanusParser.yy"
                                       fun atts t -> Id (t,atts,fst _1,snd _1) 
                   )
# 171 "JanusParser.yy"
                 : 'x));
# 1301 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*(int*int*int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "JanusParser.yy"
                                                       fun t -> Id (t,defDataAtts,fst _1,snd _1) 
                   )
# 174 "JanusParser.yy"
                 : 'x_arg));
# 1312 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*(int*int*int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int*int*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "JanusParser.yy"
                                                       fun t -> Id (Array t,defDataAtts,fst _1,snd _1) 
                   )
# 175 "JanusParser.yy"
                 : 'x_arg));
# 1325 "JanusParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*(int*int*int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "JanusParser.yy"
                                           fst _1 
                   )
# 177 "JanusParser.yy"
                 : 'q));
|]
# 1337 "JanusParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 55;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start_entry lexer lexbuf : Prg =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
